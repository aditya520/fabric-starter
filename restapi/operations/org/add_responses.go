// Code generated by go-swagger; DO NOT EDIT.

package org

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"fabric_starter/models"
)

// AddOKCode is the HTTP code returned for type AddOK
const AddOKCode int = 200

/*AddOK Successful org addition

swagger:response addOK
*/
type AddOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewAddOK creates AddOK with default headers values
func NewAddOK() *AddOK {

	return &AddOK{}
}

// WithPayload adds the payload to the add o k response
func (o *AddOK) WithPayload(payload string) *AddOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add o k response
func (o *AddOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*AddDefault Error

swagger:response addDefault
*/
type AddDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddDefault creates AddDefault with default headers values
func NewAddDefault(code int) *AddDefault {
	if code <= 0 {
		code = 500
	}

	return &AddDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add default response
func (o *AddDefault) WithStatusCode(code int) *AddDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add default response
func (o *AddDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add default response
func (o *AddDefault) WithPayload(payload *models.Error) *AddDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add default response
func (o *AddDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
